//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Common/Input/MainActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MainActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MainActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MainActions"",
    ""maps"": [
        {
            ""name"": ""Hunter"",
            ""id"": ""7c150413-3a84-400f-8a80-91229f9ec31a"",
            ""actions"": [
                {
                    ""name"": ""PointerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""7889bd31-d0aa-474b-8e5f-8c66a06862f4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""caa2121f-902b-4fe9-a242-c2abb0962eb9"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pointer"",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Pointer"",
            ""bindingGroup"": ""Pointer"",
            ""devices"": [
                {
                    ""devicePath"": ""<Pointer>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Hunter
        m_Hunter = asset.FindActionMap("Hunter", throwIfNotFound: true);
        m_Hunter_PointerPosition = m_Hunter.FindAction("PointerPosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Hunter
    private readonly InputActionMap m_Hunter;
    private IHunterActions m_HunterActionsCallbackInterface;
    private readonly InputAction m_Hunter_PointerPosition;
    public struct HunterActions
    {
        private @MainActions m_Wrapper;
        public HunterActions(@MainActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PointerPosition => m_Wrapper.m_Hunter_PointerPosition;
        public InputActionMap Get() { return m_Wrapper.m_Hunter; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HunterActions set) { return set.Get(); }
        public void SetCallbacks(IHunterActions instance)
        {
            if (m_Wrapper.m_HunterActionsCallbackInterface != null)
            {
                @PointerPosition.started -= m_Wrapper.m_HunterActionsCallbackInterface.OnPointerPosition;
                @PointerPosition.performed -= m_Wrapper.m_HunterActionsCallbackInterface.OnPointerPosition;
                @PointerPosition.canceled -= m_Wrapper.m_HunterActionsCallbackInterface.OnPointerPosition;
            }
            m_Wrapper.m_HunterActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PointerPosition.started += instance.OnPointerPosition;
                @PointerPosition.performed += instance.OnPointerPosition;
                @PointerPosition.canceled += instance.OnPointerPosition;
            }
        }
    }
    public HunterActions @Hunter => new HunterActions(this);
    private int m_PointerSchemeIndex = -1;
    public InputControlScheme PointerScheme
    {
        get
        {
            if (m_PointerSchemeIndex == -1) m_PointerSchemeIndex = asset.FindControlSchemeIndex("Pointer");
            return asset.controlSchemes[m_PointerSchemeIndex];
        }
    }
    public interface IHunterActions
    {
        void OnPointerPosition(InputAction.CallbackContext context);
    }
}
